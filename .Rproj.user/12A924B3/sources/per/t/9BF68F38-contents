---
title: "notes_week3"
author: "Benjamin Cole"
date: "April 11, 2018"
output:
  html_document: default
---
Updated the assignments package with an assignment 00 (package presentations), who's going to do next week
Development tools
R functions, creating packages



For project to succeed, need:

Data

Clearly defined goal

  many ways to look at this:
    specific
      Not vague, trying to accomplish something very clear
    measurable
      know metrics that determine success, can measure outcome
    Achievable
      that it is feasible
        might come after first cut of data
    relevant
      relevent to mission of company
    time bound
      know how long it will take? need a deadline.
      
A process
  allows understanding of problem
  formulate an approach
  build models
  evaluate performance
  deploy
  monitor
  
Patience (iterative process) convey to business partners. have to communicate well, know where yous tand, how far you've come, how far need to go.
  articlate through formal problem statement
  
sometimes you get stuck on a project, technically or because you are falling behind
  three things to get unstuck
    1. you are where you are. doesn't matter the history, no use pointing fingers
    2. facts are your friends. no fake news, look a the facts, figure out what they are. be brually honest
    3. figure out who is going to do what, when; figure out steps, execute.
    
**Package Presentations**

**stringr**

Part of tidyverse, for working with character strings. good for functions in 6 areas:
Every function starts with str
1. matches
  str_match Detects matches. first arg is vector, second is pattern. Returns logical.
  str_count
  str_locate
  
2. subsetting
  str_sub()
  str_subset()
  str_extract() Good for regex.
  str_match

3. managing lengths
  str_length
  str_pad; adds more characters to each element
  str_trunc() truncates string to certain length
  
4. mutating
  str_replace()
    str_replace_all -- all patterns
    str_replace -- only first
  can convert to all lower, all upper, or title case.

Many functions are locale sensitive, if working w/ non-english text, can accomodate particular language-specific elements.

5. ordering
  letters -- each str in vector is of the alphabet
  str_sort() can specify locale can change sort order.
  
6 joining/splitting
  str_c (can concatenate into single string)
  str_dup (duplicates string)
  str_split -- searches for pattern, and splits on pattern.

similar packages:
stringi, stringdist, gsubfn
camelcase, lettercase

base r functions aren't as regular in syntax, harder to remember. stringr is streamlined/consistent.

stringr  not based on stringi

**lubridate**
Good for playing around w/ dates.

used anytime to convert to date/time -- converts to posixct object.

can quickly pull out whether date/time is in morning or afternoon, gives boolean operator

**Magrittr**

the pipe operator (%>%)

Simple, powerful, revolutionary operator
inspired by unix, etc. -- coding from left to right.
previous version %.%
can string functions together
included in tidyverse (not in base r)
can take data set, filter, select column, and take the mean
without pipe, would start w/ last piece of code (mean(select(filter(data))))
pipe makes it more readable.

alternatives:
create a lot of intermediate steps, overwrite objects, write functions, etc.
assign()
pipe creates intermediate objects, and keeps overwriting; slows down cpu and eats memory.
lazy evaluation, R doesn't call functions immediately. 
too many nested functions might be hard to read.
multiple inputs/outputs are hard w/ %>%
%T>% (reverses direction)
**%<>% assignment operator**
%$% access variables in data frame; breaks tidyverse standard. interpolates whatever argument is. 
"This is not a pipe" -- why %%



**ProjectTemplate**
Allows structuring of the project/automate tasks in project
Helps organize files in project
Automatically loads packages that project requires
Automatically load data in memory
Does munging; preprocesses data loaded by autoloader

Create a new project: load library, create project, and name the project
Creates directory structure


Intro to Machine learning
Math isn't hard, it's complex from a conceptual point of view

ML is a formal process for building a model.

A model is a function: f estimates a response yhat, associated w/ a set of known predictors (x).

A function (f) is a mapping of x onto y: yhat = f(x1, x2)

How do we find f?

Model training:
  1. frame problem
  2. collecct and shape data
  3. EDA
  4. Feature generation
  5. Train the model
  6. Validate model
  Iterate back to 1.
  Model specification
  
best practice to ramp up complexity in building model 
  start with stupidest model (e.g. mean, or most likely), go up to linear model, then trees
      learn a lot about data, what variables are important, maintains interpretability
      provides easy data points, can hint at trajectory

Model scoring:
  7. deploy
    get raw scores, often not waht we want, usually needs post-processing
  8. post-process
      calibrations
      converting numerical to categorical
      parsing, etc.
      Get final score
  9. final delivery
  
If new data is not "stationary" (new classes, values outside range) can blow up model
Need to engineer system to be robust to these cases.
  how to code for htis?
  use a smaller set of features as fallback
  in bagged models, can throw out models that don't produce scores or scores out of bounds.
  
Two ways to distinguish ML problems
  What are we trying to learn?
    1. based on availibility of y -> yes: supervised learning, no: unsupervised
    special edge cases:
      only some y's are known
      y's are not directly known, but inferrable (semi-supervised learning)
      y's change during training or scoring
        adaptive/reinforcement learning
        learning behavior as they go along.
        ML to play video games.
        Bardon & Sutton (bible on reinforcement learning)
    2. based on type of y
      What values can y assume?
        Continuous: Regression
        Discrete (categorical): classification
          Binary classification: can do multiple class classification, too. Multiple class logistic regression.
      edge cases:
        ordinal response: can use either classification or regression.
        dates: can use either regression or classification problems, or special techniques (forecast, survival)
  y: knowns.
    have a table of data. **all** ML algorigthms need data in a table.
      Limitation of ML algorithms.
    Each row is an observation (y is a column)
    each column is a predictor (or y)
  f: the model.
    Properties:
      produce result that is close to truth
      simplicity
      parsimonious with resources
      stability
        deterministic? give it same x's, always get same y
        when input changes, model is robust
      Take one or more inputs
      yields single output
      should be easy to evaluate
      should be close to observed values
      scalability
    Need a function that compares y to yhat.
    L(yhat, y): loss
      Depends on regression (y - yhat = 0 for all pairs) or classification
      LoL
      RMSE vs. MSE depends MAE, etc. depends on problem at hand.
      Don't want errors to cancel out.
      Choice of loss function affects scoring of model.
      Lots of algorithms have a built-in loss function, but others allow you to specify.
Naive model: yhat = mean(y) -- is a function that gives a response.
Linear functions: yhat = mx + b (linear model); yhat = B1X + B0

Classifcation problems: if(yhat = y, get zero error, else get 1) -- can sum over these

Goal is to minimize loss function.

Need to find parameters that minimize the loss
Linear regression can be directly solved, most algorithsm are numerical/recursive

Supervised learning is where ML is winning. Clustering is great, without a y, have to do interesting things. leads to ambiguity. if can frame problem as supervised, always do that.
    


What do ML algorithms have in common?

1. method for evaluating how well model does
2. restricted class of functions
  Cannot solve for an infinite number of functions
  use line, use tree, use neurons, etc.
  restrict functional output
  congealing on selected class of functions
3. Need a way to search through restricted class of functions to ID the function we want.

may see interesting developments for models with highly specifiable error functions.



Assignment
Need to adopt ProjectTemplate or Drake